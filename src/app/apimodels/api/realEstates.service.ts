/**
 * Real estate manager api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
} from '@angular/common/http';
import {CustomHttpParameterCodec} from '../encoder';
import {Observable} from 'rxjs';

// @ts-ignore
import {RealEstatesGet200ResponseInner} from '../model/realEstatesGet200ResponseInner';
// @ts-ignore
import {RealEstatesIdDelete200Response} from '../model/realEstatesIdDelete200Response';
// @ts-ignore
import {RealEstatesIdGet200Response} from '../model/realEstatesIdGet200Response';
// @ts-ignore
import {RealEstatesIdGet404Response} from '../model/realEstatesIdGet404Response';
// @ts-ignore
import {RealEstatesPost201Response} from '../model/realEstatesPost201Response';

// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';
import {environment} from "../../../enviroments/enviroment";

export interface EstateGetProps {
  id: number;
  address: string;
  image: string;
  zip_code: string;
  description: string;
  price: number;
  bedrooms: number;
  area: number;
  is_rental: boolean;
  agent_id: number;
  city_id: number;
  created_at: string;  // ISO date string
  city: City;
  agent: Agent;
}

interface City {
  id: number;
  name: string;
  region_id: number;
  region: Region;
}

interface Region {
  id: number;
  name: string;
}

interface Agent {
  id: number;
  name: string;
  surname: string;
  email: string;
  avatar: string;
  phone: string;
}

@Injectable({
  providedIn: 'root'
})
export class RealEstatesService {

  protected basePath = 'https://api.real-estate-manager.redberryinternship.ge/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  readonly token: string | undefined = environment.API_KEY;

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string | string[], @Optional() configuration: Configuration) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
      if (firstBasePath != undefined) {
        basePath = firstBasePath;
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(
          httpParams, value[k], key != null ? `${key}.${k}` : k));
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * Get all real estates
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public realEstatesGet(): Observable<any> {
    let localVarPath = `/real-estates`;
    return this.httpClient.get(`${this.configuration.basePath}${localVarPath}`,
      {
        headers: {
          'Authorization': `Bearer ${this.token}`,
        },
        reportProgress: true,
        observe: 'events'
      }
    );
  }

  /**
   * Delete a real estate
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public realEstatesIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<RealEstatesIdDelete200Response>;
  public realEstatesIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpResponse<RealEstatesIdDelete200Response>>;
  public realEstatesIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<HttpEvent<RealEstatesIdDelete200Response>>;
  public realEstatesIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {
    httpHeaderAccept?: 'application/json',
    context?: HttpContext,
    transferCache?: boolean
  }): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling realEstatesIdDelete.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'application/json'
      ];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/real-estates/${this.configuration.encodeParam({
      name: "id",
      value: id,
      in: "path",
      style: "simple",
      explode: false,
      dataType: "number",
      dataFormat: undefined
    })}`;
    return this.httpClient.request<RealEstatesIdDelete200Response>('delete', `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public realEstatesIdGet(id: number): Observable<any> {

    let localVarPath = `/real-estates/`;
    return this.httpClient.get<EstateGetProps>(`${this.configuration.basePath}${localVarPath}${id}`, {
      headers: {
        'Authorization': `Bearer ${this.token}`,
      },
      reportProgress: true,
      observe: 'events'
    });
  }

  /**
   * Create a real estate
   * @param address
   * @param image
   * @param regionId
   * @param description
   * @param cityId
   * @param zipCode
   * @param price
   * @param area
   * @param bedrooms
   * @param isRental
   * @param agentId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  postEstates(address: string, image: Blob, regionId: number, description: string, cityId: number, zipCode: string, price: number, area: number, bedrooms: string, isRental: boolean, agentId: number) {
    const formData = new FormData();

    // Append form data
    const data = {
      address,
      zip_code: zipCode,
      region_id: regionId,
      city_id: cityId,
      price,
      area,
      bedrooms,
      is_rental: isRental ? '1' : '0',
      description,
      agent_id: agentId
    };

    Object.entries(data).forEach(([key, value]) => formData.append(key, value.toString()));

    // Append the image file
    formData.append('image', image);

    // Make the HTTP POST request with FormData
    return this.httpClient.post('https://api.real-estate-manager.redberryinternship.ge/api/real-estates', formData, {
      headers: {
        'Authorization': `Bearer ${this.token}`,
      },
      reportProgress: true,
      observe: 'events'
    });
  }

}
